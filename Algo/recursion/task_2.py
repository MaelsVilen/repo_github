"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


# Решение через рекурсию


even_nums = []
odd_nums = []


def number_definer_b(n):
    if n == 0:
        print(f"четных цифр - {len(even_nums)}: {even_nums}, нечетных - {len(odd_nums)}: {odd_nums}")
        return even_nums, odd_nums
    elif (n % 10) % 2 == 0:
        even_nums.append(n % 10)
        return number_definer_b(n // 10)
    else:
        odd_nums.append(n % 10)
        return number_definer_b(n // 10)


number_definer_b(int(input("Введите число: ")))


# Решение через циклы


def number_definer_a(n):
    even = odd = 0
    while n > 0:
        if n % 2 == 0:
            even += 1
        else:
            odd += 1
        n = n // 10
    print(f"четных цифр - {even}, нечетных - {odd}")
    return even, odd


number_definer_a(int(input("Введите число: ")))
